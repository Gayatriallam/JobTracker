dashboard.html 
<!DOCTYPE html>
<html lang="en" class="bg-gray-50 text-gray-900 dark:bg-gray-900 dark:text-white">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard | Job Tracker</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap" rel="stylesheet" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
    }
  </style>
</head>

<body class="min-h-screen bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-900 dark:to-gray-800">
  <header class="flex justify-between items-center px-8 py-4 border-b border-gray-300 dark:border-gray-700">
    <h1 class="text-3xl font-extrabold text-purple-700 dark:text-purple-400">ðŸ’¼ Job Tracker</h1>
    <button id="theme-toggle" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded">Toggle Dark Mode</button>
  </header>

  <main class="p-8 max-w-5xl mx-auto space-y-8">
    <!-- Add Job Form -->
    <section class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg space-y-4">
      <h2 class="text-2xl font-bold text-purple-600 dark:text-purple-300">Add Job</h2>
      <input id="company" type="text" placeholder="Company" class="w-full p-3 border border-gray-300 rounded-lg" />
      <input id="position" type="text" placeholder="Position" class="w-full p-3 border border-gray-300 rounded-lg" />
      <select id="status" class="w-full p-3 border border-gray-300 rounded-lg">
        <option>Applied</option>
        <option>Interview</option>
        <option>Offer</option>
        <option>Rejected</option>
      </select>
      <textarea id="notes" placeholder="Notes" class="w-full p-3 border border-gray-300 rounded-lg"></textarea>
      <button onclick="addJob()" class="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg">
        âž• Add Job
      </button>
    </section>

    <!-- Job Status Chart -->
    <!-- Inside your chart section -->
    <section class="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-lg">
      <h2 class="text-xl font-semibold mb-2">ðŸ“Š Job Status Overview</h2>
      <div class="flex flex-col sm:flex-row items-center sm:items-start">
        <div class="w-40 h-40 sm:mr-6 mb-4 sm:mb-0"> <!-- Smaller Chart Container -->
          <canvas id="jobChart" class="w-full h-full"></canvas>
        </div>
        <div class="space-y-2 text-sm -ml-2"> <!-- Shifted slightly to the left -->
          <p><span class="inline-block w-4 h-4 bg-blue-500 rounded-full mr-2"></span>Applied</p>
          <p><span class="inline-block w-4 h-4 bg-yellow-500 rounded-full mr-2"></span>Interview</p>
          <p><span class="inline-block w-4 h-4 bg-green-500 rounded-full mr-2"></span>Offer</p>
          <p><span class="inline-block w-4 h-4 bg-red-500 rounded-full mr-2"></span>Rejected</p>
        </div>
      </div>
    </section>


    <!-- Job List -->
    <section id="jobs" class="grid grid-cols-1 sm:grid-cols-2 gap-4"></section>
  </main>

  <script src="dashboard.js"></script>
</body>
</html>

dashboard.js
document.addEventListener('DOMContentLoaded', () => {
  const API = 'http://localhost:5000/api';
  let token = localStorage.getItem('token');

  const themeToggleBtn = document.getElementById('theme-toggle');
  if (themeToggleBtn) {
    themeToggleBtn.addEventListener('click', () => {
      document.documentElement.classList.toggle('dark');
    });
  }

  // Show dashboard after login/register
  function showDashboard() {
    window.location.href = 'dashboard.html';
  }

  // Login
  window.login = function () {
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    fetch(`${API}/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    })
      .then(res => res.json())
      .then(data => {
        if (data.token) {
          localStorage.setItem('token', data.token);
          token = data.token;
          showDashboard();
        } else {
          alert(data.error || 'Login failed');
        }
      });
  };

  // Register
  window.register = function () {
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;

    fetch(`${API}/auth/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, password })
    })
      .then(res => res.json())
      .then(data => {
        if (data.token) {
          localStorage.setItem('token', data.token);
          token = data.token;
          showDashboard();
        } else {
          alert(data.error || 'Registration failed');
        }
      });
  };

  // Add Job
  window.addJob = function () {
    const company = document.getElementById('company').value;
    const position = document.getElementById('position').value;
    const status = document.getElementById('status').value;
    const notes = document.getElementById('notes').value;

    fetch(`${API}/jobs`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({ company, position, status, notes })
    })
      .then(res => res.json())
      .then(data => {
        console.log('Job added:', data);
        loadJobs();
      })
      .catch(err => {
        console.error('Error adding job:', err);
        alert("Failed to add job.");
      });
  };

  // Load Jobs
  function loadJobs() {
    fetch(`${API}/jobs`, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
      .then(res => res.json())
      .then(jobs => {
        const jobsContainer = document.getElementById('jobs');
        if (!jobsContainer) return;

        jobsContainer.innerHTML = '';
        const statusCount = { Applied: 0, Interview: 0, Offer: 0, Rejected: 0 };

        jobs.forEach(job => {
          statusCount[job.status]++;

          const div = document.createElement('div');
          div.className = 'bg-white dark:bg-gray-800 p-4 rounded shadow space-y-2';
          div.innerHTML = `
            <h3 class="font-bold text-lg">${job.company}</h3>
            <p><strong>Position:</strong> ${job.position}</p>
            <p><strong>Status:</strong> 
              <span class="inline-block px-2 py-1 text-xs rounded-full ${getStatusBadgeClass(job.status)}">
                ${job.status}
              </span>
            </p>
            <p>${job.notes}</p>
            <button 
              onclick="deleteJob(${job.id})"
              class="mt-2 px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600">
              Delete
            </button>
          `;
          jobsContainer.appendChild(div);
        });

        renderChart(statusCount);
      });
  }

  // Delete Job
  window.deleteJob = function (id) {
    fetch(`${API}/jobs/${id}`, {
      method: 'DELETE',
      headers: {
        Authorization: `Bearer ${token}`
      }
    })
      .then(res => res.json())
      .then(() => loadJobs());
  };

  // Utility: Badge classes
  function getStatusBadgeClass(status) {
    switch (status) {
      case 'Applied':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100';
      case 'Interview':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-700 dark:text-yellow-100';
      case 'Offer':
        return 'bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-100';
      case 'Rejected':
        return 'bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-100';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  }

  // Render Chart
  function renderChart(statusData) {
    const ctx = document.getElementById('jobChart');
    if (!ctx) return;

    const existingChart = Chart.getChart(ctx);
    if (existingChart) existingChart.destroy();

    new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['Applied', 'Interview', 'Offer', 'Rejected'],
        datasets: [{
          data: [
            statusData.Applied,
            statusData.Interview,
            statusData.Offer,
            statusData.Rejected
          ],
          backgroundColor: [
            'rgba(59, 130, 246, 0.8)',   // Blue
            'rgba(234, 179, 8, 0.8)',    // Yellow
            'rgba(34, 197, 94, 0.8)',    // Green
            'rgba(239, 68, 68, 0.8)'     // Red
          ],
          borderColor: 'transparent'
        }]
      },
      options: {
        cutout: '60%',
        plugins: {
          legend: { display: false }
        }
      }
    });
  }

  // Auto-run loadJobs() if on dashboard
  if (document.getElementById('jobs')) {
    loadJobs();
  }
});

jobsController.js
const pool = require('../db');

exports.getJobs = async (req, res) => {
  try {
    const result = await pool.query(
      'SELECT * FROM jobs WHERE user_id = $1',
      [req.user.id]
    );
    res.json(result.rows);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createJob = async (req, res) => {
  const { company, position, status, notes } = req.body;
  try {
    const result = await pool.query(
      'INSERT INTO jobs (company, position, status, notes, user_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
      [company, position, status || 'Applied', notes || '', req.user.id]
    );
    res.status(201).json(result.rows[0]);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deleteJob = async (req, res) => {
  try {
    await pool.query(
      'DELETE FROM jobs WHERE id = $1 AND user_id = $2',
      [req.params.id, req.user.id]
    );
    res.json({ message: 'Job deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};


jobs.js
const express = require('express');
const router = express.Router();
const { getJobs, createJob, deleteJob} = require('../controllers/jobsController');
const auth = require('../middleware/auth');

router.use(auth);
router.get('/', getJobs);
router.post('/', createJob);
router.delete('/:id', deleteJob);
module.exports = router;
